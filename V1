/*
  RJ2023
  v3 (2023-12-14)
*/

package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import java.lang.Math;

@TeleOp(name="RJ2023", group="Linear Opmode")

public class RJ2023 extends LinearOpMode {

  // Declare OpMode members.
  private ElapsedTime runtime = new ElapsedTime();
  private DcMotor motorM0;
  private DcMotorSimple motorS0;
  private DcMotor motorM1;
  private DcMotorSimple motorS1;
  private DcMotor motorM2;
  private DcMotorSimple motorS2;
  private DcMotor motorM3;
  private CRServo servoS3;
  private CRServo servoS4;
  private CRServo servoS5;

  @Override
  public void runOpMode() {
  telemetry.addData("Status", "Initialized");
  telemetry.update();
      
  // Initialize the hardware variables
    motorM0 = hardwareMap.get(DcMotor.class, "motorM0"); // Drivetrain - left side
    motorM1 = hardwareMap.get(DcMotor.class, "motorM1"); // Drivetrain - right side
    motorM2 = hardwareMap.get(DcMotor.class, "motorM2");
    motorM3 = hardwareMap.get(DcMotor.class, "motorM3");
    motorS0 = hardwareMap.get(DcMotorSimple.class, "motorS0"); // Drivetrain - add'l left side
    motorS1 = hardwareMap.get(DcMotorSimple.class, "motorS1"); // Drivetrain - add'l right side
    motorS2 = hardwareMap.get(DcMotorSimple.class, "motorS2");
    servoS3 = hardwareMap.get(CRServo.class, "servoS3");
    servoS4 = hardwareMap.get(CRServo.class, "servoS4");
    servoS5 = hardwareMap.get(CRServo.class, "servoS5");

    // Set direction
    motorM0.setDirection(DcMotor.Direction.FORWARD);
    motorS0.setDirection(DcMotorSimple.Direction.FORWARD);
    motorM1.setDirection(DcMotor.Direction.REVERSE);
    motorS1.setDirection(DcMotorSimple.Direction.REVERSE);
    motorM2.setDirection(DcMotor.Direction.FORWARD);
    motorS2.setDirection(DcMotorSimple.Direction.FORWARD);
    motorM3.setDirection(DcMotor.Direction.FORWARD);
    servoS3.setDirection(CRServo.Direction.FORWARD);
    servoS4.setDirection(CRServo.Direction.REVERSE);
    servoS5.setDirection(CRServo.Direction.FORWARD);
      
    // Brake mode settings
    motorM2.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

    // Wait for the game to start (driver presses PLAY)
    waitForStart();
    runtime.reset();
    int driveMode = 0;

      // run until the end of the match (driver presses STOP)
      while (opModeIsActive()) {

        // Drivetrain - Split Arcade    

        double leftpower;//variable created for the drive computation
        double rightpower;//variable created for drive computation
          
        leftpower = gamepad1.left_stick_y - gamepad1.right_stick_x;
        rightpower = gamepad1.left_stick_y + gamepad1.right_stick_x;
          
        motorM0.setPower(leftpower);
        motorM1.setPower(rightpower);

        // Actuator Control: Servos
        
        double servoPowerS3 = 0.0;
        double servoPowerS4 = 0.0;
        double servoPowerS5 = 0.0;

        if (gamepad1.left_bumper || gamepad2.left_bumper) {
            servoPowerS3 = 1.0;
          }
        else if (gamepad1.right_bumper || gamepad2.right_bumper) {
            servoPowerS3 = -1.0;
          }

        if (gamepad1.dpad_up || gamepad2.dpad_up) {
            servoPowerS4 = 1.0;
          }
        else if (gamepad1.dpad_down || gamepad2.dpad_down) {
            servoPowerS4 = -1.0;
          }
        
        if (gamepad2.y) {
            servoPowerS5 = -1.0;
          }
        else if (gamepad2.x) {
            servoPowerS5 = 1.0;
          }

        else {
            servoPowerS3 = 0.0;
            servoPowerS4 = 0.0;
            servoPowerS5 = 0.0;
          }
        
        servoS3.setPower(servoPowerS3);
        servoS4.setPower(servoPowerS4);
        servoS5.setPower(servoPowerS5);

        // Trigger code for gamepad1/driver & motor5+6
        double motorpowerM2 = 0.0;
        double motorpowerS2 = 0.0;

        motorpowerM2 = gamepad1.right_trigger - gamepad1.left_trigger + gamepad2.right_trigger - gamepad2.left_trigger;
        motorpowerS2 = motorpowerM2;
      
        motorM2.setPower(motorpowerM2*0.5);
        motorS2.setPower(-motorpowerS2*-0.5);


        // Motor Control: A & B Buttons

        double motorpowerM3 = 0.0;

        if (gamepad1.a || gamepad2.a)
          {
            motorpowerM3 = 1.0;
          }
        
        else if (gamepad1.b || gamepad2.b)
          {
            motorpowerM3 = -1.0;
          }

        else 
        {
            motorpowerM3 = 0.0;
        }

        motorM3.setPower(motorpowerM3);


        // Stick code for gamepad2/operator & motor5+6
        /*
        double motorpower5drive =  gamepad2.left_stick_y;
        motorpower5 = Range.clip(motorpower5drive, -1.0, 1.0);
        motor5.setPower(motorpower5);
        double motorpower6drive =  gamepad2.right_stick_y;
        motorpower6 = Range.clip(motorpower6drive, -1.0, 1.0);
        motor6.setPower(motorpower6);
        */
      
        // Show the elapsed game time and wheel power.
        // telemetry.addData("Status", "Run Time: " + runtime.toString());
        // telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
        // telemetry.addData("Motors", "motor5 (%.2f), motor6 (%.2f), motor7 (%.2f), motor8 (%.2f)", motorpower5, motorpower6, motorpower7);
        // telemetry.addData("Servos", "servo1 (%.2f), servo2 (%.2f)", servoPower1, servoPower2);
        // telemetry.update();
    }
  }
  }
