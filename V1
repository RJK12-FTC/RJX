/*
  RJ2023
  v1.1 (2023-12-04)
*/

package org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.TouchSensor;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;
import java.lang.Math;

@TeleOp(name="RJ2023", group="Linear Opmode")

public class RJ2023 extends LinearOpMode {

  // Declare OpMode members.
  private ElapsedTime runtime = new ElapsedTime();
  private DcMotor motor1;
  private DcMotorSimple motor2;
  private DcMotor motor3;
  private DcMotorSimple motor4;
  private DcMotor motor5;
  private DcMotorSimple motor6;
  private DcMotor motor7;
  private CRServo servo1;
  private CRServo servo2;
  private CRServo servo3;

  @Override
  public void runOpMode() {
  telemetry.addData("Status", "Initialized");
  telemetry.update();
      


  // Initialize the hardware variables. Not that the strings used here as parameters
  // to 'get' must correspond to the names assigned during the robot configuration
  // step (using the FTC Robot Controller app on the phone).
    motor1 = hardwareMap.get(DcMotor.class, "motor1");
    motor2 = hardwareMap.get(DcMotorSimple.class, "motor2");
    motor3 = hardwareMap.get(DcMotor.class, "motor3");
    motor4 = hardwareMap.get(DcMotorSimple.class, "motor4");
    motor5 = hardwareMap.get(DcMotor.class, "motor5");
    motor6 = hardwareMap.get(DcMotorSimple.class, "motor6");
    motor7 = hardwareMap.get(DcMotor.class, "motor7");
    servo1 = hardwareMap.get(CRServo.class, "servo1");
    servo2 = hardwareMap.get(CRServo.class, "servo2");
    servo3 = hardwareMap.get(CRServo.class, "servo3");

    // Most robots need the motor on one side to be reversed to drive forward
    // Reverse the motor that runs backwards when connected directly to the battery
    motor1.setDirection(DcMotor.Direction.FORWARD);
    motor2.setDirection(DcMotorSimple.Direction.FORWARD);
    motor3.setDirection(DcMotor.Direction.REVERSE);
    motor4.setDirection(DcMotorSimple.Direction.REVERSE);
    motor5.setDirection(DcMotor.Direction.FORWARD);
    motor6.setDirection(DcMotorSimple.Direction.FORWARD);
    motor7.setDirection(DcMotor.Direction.FORWARD);
    servo1.setDirection(CRServo.Direction.FORWARD);
    servo2.setDirection(CRServo.Direction.REVERSE);
    servo3.setDirection(CRServo.Direction.FORWARD);
      
    

    // Brake mode settings
    motor5.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);

    // Wait for the game to start (driver presses PLAY)
    waitForStart();
    runtime.reset();
    int driveMode = 0;

      // run until the end of the match (driver presses STOP)
      while (opModeIsActive()) {
          

        double leftpower;//variable created for the drive computation
        double rightpower;//variable created for drive computation
        
        //split arcade drive computation (default)
        

        leftpower = gamepad1.left_stick_y - gamepad1.right_stick_x;
        rightpower = gamepad1.left_stick_y + gamepad1.right_stick_x;
        
        motor1.setPower(leftpower);
        motor3.setPower(rightpower);

      // Bumper code for gamepad1/Driver
      double servoPower2 = 0.0;
      double servoPower1 = 0.0;
      double servoPower3 = 0.0;
      if (gamepad1.left_bumper || gamepad2.left_bumper)
        {
          servoPower2 = 1.0;
          
        }
        else if (gamepad1.right_bumper)
        {
          servoPower2 = -1.0;
     
        }

       else if (gamepad2.right_bumper)
        {
          
          servoPower2 = -1.0;
        }
        else if (gamepad2.dpad_up || gamepad2.dpad_right)
        {
          servoPower1 = 1.0;
        }

      else if (gamepad2.dpad_left || gamepad2.dpad_down)
        {
          servoPower1 = -1.0;
        }
      
      else 
        {
          servoPower1 = 0.0;
          servoPower2 = 0.0;
          
        }
      if (gamepad2.y)
      {
        servoPower3 = -1.0;
      }
      if (gamepad2.x)
      {
        servoPower3 = 1.0;
      }
	  if (gamepad2.b)
      {
        servoPower3 = 0.0;
      }
        servo1.setPower(servoPower1);
        servo2.setPower(servoPower2);
        servo3.setPower(servoPower3);
        
  

      // Trigger code for gamepad1/driver & motor5+6
      double motorpower5 = 0.0;
      double motorpower6 = 0.0;

      motorpower5 = gamepad1.right_trigger - gamepad1.left_trigger + gamepad2.right_trigger - gamepad2.left_trigger;
      motorpower6 = motorpower5;
     
      motor5.setPower(motorpower5*0.35);
      motor6.setPower(-motorpower6*-0.35);


      // Triangle and square code for gamepad1/driver & motor7+8
      double motorpower7 = 0.0;
      double motorpower8 = 0.0;
      if (gamepad1.x || gamepad2.x)
        {
        motorpower7 = 1.0;
        }
      else if (gamepad1.y || gamepad2.y)
        {
          motorpower7 = -1.0;
        }

      else 
      {
          motorpower7 = 0.0;
      }
      motor7.setPower(motorpower7);




    
      // Stick code for gamepad2/operator & motor5+6
      // TODO: Make a criteria to swtich into different drive mode
      /*
      double motorpower5drive =  gamepad2.left_stick_y;
      motorpower5 = Range.clip(motorpower5drive, -1.0, 1.0);
      motor5.setPower(motorpower5);
      double motorpower6drive =  gamepad2.right_stick_y;
      motorpower6 = Range.clip(motorpower6drive, -1.0, 1.0);
      motor6.setPower(motorpower6);
      */
     

      
      // Show the elapsed game time and wheel power.
      telemetry.addData("Status", "Run Time: " + runtime.toString());
      // telemetry.addData("Motors", "left (%.2f), right (%.2f)", leftPower, rightPower);
      telemetry.addData("Motors", "motor5 (%.2f), motor6 (%.2f), motor7 (%.2f), motor8 (%.2f)", motorpower5, motorpower6, motorpower7);
      telemetry.addData("Servos", "servo1 (%.2f), servo2 (%.2f)", servoPower1, servoPower2);
      telemetry.update();
    }
  }
  }
